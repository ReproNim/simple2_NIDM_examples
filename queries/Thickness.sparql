## The main issue was that the measures (for left, right, and mean) were coming from different stats collections 
## (nidm:FSStatsCollection) associated with different activitities (prov:Acitivity). The previous code
## was assuming that the measurements were coming from the same collection and activity. I also fixed other
## minor issues for effeciency (e.g., removing unnecessary transitive subclass searches) and made the code 
## simpler to follow. - Fahim

prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix prov: <http://www.w3.org/ns/prov#>
prefix ndar: <https://ndar.nih.gov/api/datadictionary/v2/dataelement/>
prefix nidm: <http://purl.org/nidash/nidm#>
prefix fs: <https://surfer.nmr.mgh.harvard.edu/>
prefix dct: <http://purl.org/dc/terms/>
prefix dctypes: <http://purl.org/dc/dcmitype/>
prefix ilx: <http://uri.interlex.org/>

SELECT DISTINCT 
    ?ID ?Sex ?Age
    ?measure_left_label ?measure_left_value
    ?measure_right_label ?measure_right_value
    ?measure_mean_label ?measure_mean_value

WHERE 
{
    # Gather the activity types for each type of measure associated with a given subject
    ?measure_left_activity prov:qualifiedAssociation [prov:agent [ndar:src_subject_id ?ID]] .
    ?measure_right_activity prov:qualifiedAssociation [prov:agent [ndar:src_subject_id ?ID]] .
    ?measure_mean_activity prov:qualifiedAssociation [prov:agent [ndar:src_subject_id ?ID]] .
    
    # Gather the stats collections (nidm:FSStatsCollection) generated by each acitivity type above,
    # and allocate the variables for measurement types and values to be identified. 
    ?left_stats_collection a nidm:FSStatsCollection;
                           prov:wasGeneratedBy ?measure_left_activity;
                           ?measure_left  ?measure_left_value.
    
    ?right_stats_collection a nidm:FSStatsCollection;
                            prov:wasGeneratedBy ?measure_right_activity;
                            ?measure_right ?measure_right_value.
    
    ?left_stats_collection a nidm:FSStatsCollection;
                           prov:wasGeneratedBy ?measure_mean_activity;
                           ?measure_mean  ?measure_mean_value.
    
    # Set the mesurement type identified based on the specific values for each data element 
    ?measure_left a fs:DataElement;
                    rdfs:label ?measure_left_label;
                    fs:measure 'ThickAvg' ;
                    fs:structure 'superiortemporal' ;
                    nidm:hasLaterality 'Left'.
    
    ?measure_right a fs:DataElement;
                     rdfs:label ?measure_right_label;
                     fs:measure 'ThickAvg' ;
                     fs:structure 'superiortemporal' ;
                     nidm:hasLaterality 'Right'.
    
    ?measure_mean a fs:DataElement ;
                    rdfs:label ?measure_mean_label;
                    fs:measure 'MeanThickness' ;
                    fs:structure 'Cortex' .

    
    ?as_activity prov:qualifiedAssociation [prov:agent [ndar:src_subject_id ?ID]] .
    
    # find sex data element uuid
    {?sex_measure a nidm:PersonalDataElement ;
        nidm:isAbout <http://uri.interlex.org/base/ilx_0101292> . #Biological sex
        #nidm:isAbout <http://id.nlm.nih.gov/mesh/2018/M0446358> . #Genetic sex
    }

    # find age data element uuid
    {?age_measure a nidm:PersonalDataElement ;
        nidm:isAbout ilx:ilx_0100400 .     
    }

    ?as_entity prov:wasGeneratedBy ?as_activity ;
        ?sex_measure ?SexCoded ;
        ?age_measure ?Age.    
    bind(IF((?SexCoded ="M" || ?SexCoded ="Male"^^xsd:string), "Male"^^xsd:string,"Female"^^xsd:string) as ?Sex) .
}
ORDER BY ?ID
